** **************************************************************************************
Standard inställningar
** **************************************************************************************
1: Skapa en console app
2: Lägg till appsettings.json. Uppdatera databas namnet. Kom ihåg property "Copy if newer"
3: Installera alla nuget paket (matchar version)
	Microsoft.EntityFrameworkCore.SqlServer
	Microsoft.EntityFrameworkCore.Tools
	Microsoft.Extensions.Configuration.json
4: Create json builder (boiler plate code)
5: Create 'Data' folder. Create classes.
6: Create DBContext (boiler plate code). Create options & connectionstring variables (boiler plate code).
7a: Kör i console add-migration "Initial migration"
7b: Migrate DbSets to SQL tabeller


** **************************************************************************************
Template
** **************************************************************************************
INFO: Nu är din databas skapad och du har tillgång till datat via din DbContext 
Här skulle du kunna skapa en kopia av projektet och använder den som en template
De saker som man behöver ändra på om man ska använda denna template till ett nytt projekt är:
	a: Ändra namnet på databasen i din appsettings.json
	b: Ändra namnet på databasen i din dbContext (OnConfiguring metod)
	c: Ändra klasserna så att de matchar din nya databas
	d: Radera mappen som heter "Migrations"
	e: Kör add-migration "Initial migration" igen
That's it!!!


** **************************************************************************************
Best practise
** **************************************************************************************
8: Vi vill lämna 'Main' static class och jobbar i vår egen class som heter 'Application'


** **************************************************************************************
add-migration
** **************************************************************************************
INFO: Varje gång vi vill ändra i vår databas (add kolumn eller tabell) måste vi köra tex:
	add-migration "Column added"
EF Core är så kraftfull att den skapar en ny migration och lägga till det som är tillagd
i vår databas. Den är så smart att den kör ENDAST de saker som är nya....


** **************************************************************************************
Attributes
** **************************************************************************************
https://learn.microsoft.com/en-us/ef/core/modeling/entity-properties?tabs=data-annotations%2Cwithout-nrt
INFO: Attributes hjälper oss att bestämma hur våra kolumner ska se ut (vilka properties de har)

9: Create some attributes for our table columns tex.
Name	[Required] [MaxLength(100)]
Age	[Range(15,100)]
Id	[Key]

Kom ihåg! Nu har vi ändrat på vår databas!
Då måste vi köra en ny add-migration.. .tex:
add-migration "Added attributes to Name & Age"

När vi kör vår app med F5 så kommer databasen att uppdateras. Tack vare 
	dbContext.Database.Migrate();


** **************************************************************************************
Lägg till en kolumn i en befintlig tabell
** **************************************************************************************
10: Vi lägger till en kolumn i 'Person' classen. tex:
ShoeSize	[Range(1,60)]

Kom ihåg! Nu har vi ändrat på vår databas!
Då måste vi köra en ny add-migration.. .tex:
add-migration "Added ShoeSize to person"

När vi kör vår app med F5 så kommer databasen att uppdateras. Tack vare 
	dbContext.Database.Migrate();


** **************************************************************************************
Lägg till en ny tabell
** **************************************************************************************
11: Vi lägger till en tabell (C# class) som heter 'County'

Lägg till 'County' som en DbSet<> i din dbcontext

Kom ihåg! Nu har vi ändrat på vår databas!
Då måste vi köra en ny add-migration.. .tex:
add-migration "Added County table"

När vi kör vår app med F5 så kommer databasen att uppdateras. Tack vare 
	dbContext.Database.Migrate();

INFO: Vi skulle kunna tom. ändra namnet på databasen (tex. 'InvoiceVersion2') i appsettings.json och spara 
allt till en ny databas. Inclusive alla vår migrations!


** **************************************************************************************
OH NO!!!Vi glömde koppla 'County' till vår 'Person'
** **************************************************************************************
12: Vi vill koppla varje 'Person' till en 'County'. tex:
	public County County { get; set; }

Kom ihåg! Nu har vi ändrat på vår databas!
Då måste vi köra en ny add-migration.. .tex:
add-migration "Connected Person to County"

När vi kör vår app med F5 så kommer databasen att uppdateras. Tack vare 
	dbContext.Database.Migrate();

INFO: Rita ut en databas diagram från SMMS


** **************************************************************************************
Best practise
** **************************************************************************************
13: Create a new class 'DataInitializer' med en Metod som heter 'MigrateAnsSeed(dbContext)'

(BEST PRACTISE)
Nu kan vi flytta raden i vår Application class 
	dbContext.Database.Migrate();
Till vår nya metod som heter MigrateAndSeed(dbContext)


** **************************************************************************************
SEED Data (Stödtabell - County)
** **************************************************************************************
14: Fyll på stödtabellen 'County'.

INFO: Kör din app med F5. Kolla nu på din databas... 
Ser du att det finns data i County tabellen numera? Coooolt!

Varje gång din app körs så kommer detta data att skapas (om det inte finns redan!)
OBS: Även om du skulle av misstag ta bort data i County


** **************************************************************************************
(C)REATE
** **************************************************************************************
15: Vi ger användaren möjlighet att skapa nya personer och lägger till de i databasen


** **************************************************************************************
(R)EAD
** **************************************************************************************
16: Vi ger användaren möjlighet att se alla personer som finns i vår databas

17: Hmmm varför ser inte jag någon information i 'County'?
Jag måste nog köra INCLUDE för att få se datat....


** **************************************************************************************
(U)PDATE
** **************************************************************************************
18: Vi ger användaren möjlighet att uppdatera befintliga personer som finns i vår databas


** **************************************************************************************
(D)ELETE
** **************************************************************************************
19: Vi ger användaren möjlighet att radera befintliga personer som finns i vår databas


** **************************************************************************************
Refactoring - ÖVNING!!
** **************************************************************************************
20: Hmmm det är något konstigt i min kod.
Användaren har inte möjlighet att välja vad de vill göra!

A: Vi behöver någon form av meny som anropar varje del (C R U D) beroende på vad användaren väljer.

B: Då behöver vi säkert lägger de olika delar i varsin metod()? tex. 
	CreatePerson()
	ReadPersons()
	UpdatePerson()
	DeletePerson()

C: SRP!!! 
Vår Application class gör väldigt mycket just nu.
Vi kanske ska splittra på det lite och lägger det i flera klasser.
Det vore smart om de fanns i en ny mapp också...
Undrar om vi kan kalla mappen för Controllers. tex.

Controllers =>
		Build
		Main Menu
		Create
		Read
		Update
		Delete

D: Gör en UML diagram av dina klasser nu när du har refactored.



















github länk: https://github.com/RichardChalk/EFCoreCodeFirstTogether